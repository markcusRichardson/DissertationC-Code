// ===================================================================
// =============           Library and Serial Setup           =========
// ===================================================================
#include <radar.h>
#include <Adafruit_AMG88xx.h>
#include <Wire.h>
#include "PinChangeInterrupt.h"
#include <SoftwareSerial.h>

// Software serial configuration for radar module
SoftwareSerial SSerial(8, 7); // RX = pin 8, TX = pin 7
#define Serial1 SSerial       // Alias for clarity in code

// ===================================================================
// =============             General Variables                =========
// ===================================================================
bool detected = false;        // Global detection flag
int radarReading = 0;         // Stores current radar motion reading

// ===================================================================
// =============             Radar Definitions                =========
// ===================================================================
#define MESSAGE_HEAD 0x55
byte radarResponse[9];        // Incoming radar response buffer
const int responseLength = 9; // Fixed radar frame size

// ===================================================================
// =============             IR Sensor Definitions            =========
// ===================================================================
int MotionInterrupt = 9;                     // Not used here but declared
int NUM_SEGMENTS = 4;                        // Divide 8x8 matrix into 4 vertical zones
int segments[4] = {0};                       // Holds pixel counts per segment
Adafruit_AMG88xx amg;                        // IR sensor instance
int Threshold_TEMP = 20;                     // Not used here but available
int Movement_Threshold = 0;                  // Minimum hot pixels per segment
float pixels[64];                            // Current frame
float previousPixels[64];                    // For future comparison if needed
float ambientTEMP = 0;                       // Used for dynamic threshold

// ===================================================================
// =============             Radar Communication              =========
// ===================================================================

// Read radar serial response
void readRadarResponse() {
  while (Serial1.available()) {
    byte incomingByte = Serial1.read();
    if (incomingByte == MESSAGE_HEAD) {
      radarResponse[0] = incomingByte;
      for (int i = 1; i < responseLength; i++) {
        while (!Serial1.available());
        radarResponse[i] = Serial1.read();
      }
      return;
    }
  }
}

// Interpret radar frame and classify motion
void interpretResponse() {
  if (radarResponse[0] == MESSAGE_HEAD) {
    byte motionState = radarResponse[8]; // Motion type code
    switch (motionState) {
      case 0x02: detected = true; radarReading = 1; break; // Approaching
      case 0x03: detected = true; radarReading = 2; break; // Departing
      case 0x04: detected = true; radarReading = 3; break; // Sustained approach
      case 0x05: detected = true; radarReading = 4; break; // Sustained departure
      default:   detected = false; radarReading = 0; break;
    }
  }
}

// Send radar motion query (called once in setup)
void sendMotionQuery() {
  byte frame[] = {0x55, 0x07, 0x00, 0x01, 0x03, 0x07, 0x00, 0x00};
  unsigned short crc = calculateCRC16(frame, sizeof(frame) - 2);
  frame[sizeof(frame) - 2] = (crc & 0xFF);
  frame[sizeof(frame) - 1] = (crc >> 8);
  Serial1.write(frame, sizeof(frame));
}

// Send scene mode query
void sendSceneQuery() {
  byte frame[] = {0x55, 0x08, 0x00, 0x02, 0x04, 0x10, 0x01, 0x00, 0x00};
  unsigned short crc = calculateCRC16(frame, sizeof(frame) - 2);
  frame[sizeof(frame) - 2] = (crc & 0xFF);
  frame[sizeof(frame) - 1] = (crc >> 8);
  Serial1.write(frame, sizeof(frame));
}

// Send radar sensitivity configuration
void sendSensitiveQuery() {
  byte frame[] = {0x55, 0x08, 0x00, 0x02, 0x04, 0x0C, 0x03, 0x00, 0x00};
  unsigned short crc = calculateCRC16(frame, sizeof(frame) - 2);
  frame[sizeof(frame) - 2] = (crc & 0xFF);
  frame[sizeof(frame) - 1] = (crc >> 8);
  Serial1.write(frame, sizeof(frame));
}

// ===================================================================
// =============              CRC Lookup Tables               =========
// ===================================================================
const unsigned char cuc_CRCHi[256] = { 0x00, 0xC1, 0x81, 0x40, 0x01, 
0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40 };


const unsigned char cuc_CRCLo[256] = { 0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03,
0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7,
0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9,
0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D,
0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF,
0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1,
0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB,
0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97,
0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89,
0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83,
0x41, 0x81, 0x80, 0x40 };

// CRC-16 checksum generator
unsigned short calculateCRC16(byte *frame, unsigned short length) {
  unsigned char crcHi = 0xFF;
  unsigned char crcLo = 0xFF;
  unsigned int index;

  while (length--) {
    index = crcLo ^ *frame++;
    crcLo = crcHi ^ cuc_CRCHi[index];
    crcHi = cuc_CRCLo[index];
  }
  return (crcLo << 8 | crcHi);
}

// ===================================================================
// =============            IR Sensor Functions               =========
// ===================================================================

// Process 8x8 heatmap and count hot pixels in 4 vertical zones
void analyzeHeatmap(float pixels[]) {
  for (int i = 0; i < NUM_SEGMENTS; i++) segments[i] = 0;

  for (int col = 0; col < 8; col++) {
    for (int row = 0; row < 8; row++) {
      int segmentIndex = row / 2;
      if (pixels[row * 8 + col] > ambientTEMP + 0.5) {
        segments[segmentIndex]++;
      }
    }
  }
}

// Check if enough movement is detected in any segment
bool isHeatDetected() {
  for (int i = 0; i < NUM_SEGMENTS; i++) {
    if (segments[i] >= Movement_Threshold) return true;
  }
  return false;
}

// ===================================================================
// =============                 Setup                        =========
// ===================================================================
void setup() {
  Serial.begin(9600);
  Serial1.begin(9600);
  Serial.print("Setup");

  // Radar configuration
  sendMotionQuery();
  sendSensitiveQuery();
  sendSceneQuery();

  // IR sensor setup
  amg.begin();
  amg.setMovingAverageMode(false);  // Faster pixel response
}

// ===================================================================
// =============                 Loop                         =========
// ===================================================================
void loop() {
  // === Radar Polling ===
  if (Serial1.available() >= responseLength) {
    readRadarResponse();
    interpretResponse();
  }

  // === IR Frame Processing ===
  amg.readPixels(pixels);
  ambientTEMP = amg.readThermistor(); // Dynamically track base temp
  delay(10);
  analyzeHeatmap(pixels);

  // === Transmission Condition ===
  if (detected && isHeatDetected()) {
    Serial.write(0xAA);         // Start byte
    Serial.write(radarReading); // Radar motion code (1â€“4)

    // Encode segment activity into a single byte (bitmask)
    uint8_t segmentMask = 0;
    for (int i = 0; i < NUM_SEGMENTS; i++) {
      if (segments[i] > 0) segmentMask |= (1 << i);
    }

    Serial.write(segmentMask);    // Send heatmap data (1 byte)
    Serial.write((uint8_t)0);     // Padding (can be used later)
    Serial.write(0xFF);           // End byte
  }

  // Reset detection state after transmission
  detected = false;
  radarReading = 0;
}
